JSP

JAVA SERVER PAGES
和servlet技术一样都是用于动态开发web页面的技术,jsp本质是servlet
java服务器页面。JSP是一种基于文本的程序，其特点就是HTML和Java代码共同存在

JSP是为了简化Servlet的工作出现的替代品，Servlet输出HTML非常困难，JSP就是替代Servlet输出HTML的。

运行原理：servlet通过request.Attribute（）用forward转发给jsp

语法：
         什么让jsp有自己的方法：<% !       (方法)      %>

         注释方法:  jsp: <%--        --%>
                   html/xml: <!--   -->

JSP指令： 为TOMCAT设计，只是告诉tomcat如何处理JSP页面中的其他部分。     格式：  <$@ 指令 属性名="值" %>
         1.page指令         (head前添加)
         2.include指令      (body中添加)
              静态包含： <%@ include file="路径" %>            把文件的代码内容都包含进来，再编译    
              动态包含：  <jsp:include page=""/> 
             
             区别：动态包含是运行时包含把所有JSP编程成单独的servlet，静态包含是编译时包含把所有JSP编译成一个servlet，效率比动态好          
               【如果有相同名称的参数，使用静态包含就会报错！】！
                                   
         3.taglib指令（导入标签库使用 ：<%@ taglib uri="/struts-tags"  prefix="s"%>   ）
  
  
  JSP常用标签（行为）
  1.include行为            <jsp:include page=""/>   include行为是动态包含
  2.param行为              <jsp:param page="">      当使用jsp:include和jsp:forward行为引入或将请求转发给其它资源时，可以使用jsp:param行为向这个资源传递参数。
  例：    <jsp:forward page="head.jsp">
           <jsp:param name="username" value="zhongfucheng"/>
         </jsp:forward>
  
  3.forward行为            <jsp:forward page=""/>    其实forward行为就是对其封装！
 
 //4.directive行为
 //5.javaBean行为
  
  
  
(*)九大隐式对象：
Request        （得到用户请求信息）
Response       （服务器向客户端的回应信息）
Session        （用来保存用户信息）             内置对象session其实就是HttpSession
Application    （所有用户的共享信息）           内置对象application其实就是ServletContext对象
Config         （服务器配置，可以取得初始化参数）
Page           （指当前页面转换后的servlet类的实例）        page对象相当于普通java类的this
Exception      （错误页面中使用）                         java.lang.Exception类的对象
Out            （用于页面输出）
pageContext    （JSP页面容器，可以调用方法获取其他八个对象，例如.getRequest()返回request对象）           代表着JSP页面编译后的内容，当前JSP页面
       
       
       
       
pageContext  的方法：
setAttribute(String name,Objcet o)
getAttribute(String name)
removeAttribute(String name)
findAttribute(String name)

PageContext类中定义了一个forward方法和两个include方法来分别简化和替代RequestDispatcher.forward方法和include方法。
pageContext.forward(String url)
pageContext.include(String url)



JSP映射
web.xml中配置     (运行b.jsp结果映射到运行a.jsp)
              <servlet>
               <servlet-name>xxx</servlet-name>
               <jsp-file>/a.jsp</jsp:file>
              </servlet> 
              
              <servlet-mapping>
                <servlet-name>xxxx</servlet-name>
                <url-pattern>/b.jsp</url-pattern>
              </servlet-mapping>




JSP两种技术
1.el
  ${}
2.JSTL


自定义标签































