response   request




response(响应) 应用
1.输出
  例：              编码问题;
                   1. response.setContentType("text/html;charset=UTF-8");		
            		String date = "中国";
            		PrintWriter out =response.getWriter();
                     out.write(date);
		
 
		 2.response.getoutputstream().write("".getbtyes());
		 
		 
		 3.       //设置浏览器用UTF-8编码显示数据，
                    response.setContentType("text/html;charset=UTF-8");

                    //获取到printWriter对象
                     PrintWriter printWriter = response.getWriter();
                     printWriter.write("看完博客点赞！");
 
2.下载
  例：  String path= this.getServletContext().getRealPath("/download/环奈.jpg");	 
		 //截取文件名方法            substring(path.lastIndexOf("\\")+1)
		 String filename =path.substring(path.lastIndexOf("\\")+1);
		 //打开方式
		 response.setHeader("content-disposition", "attachment;filename"+URLEncoder.encode(filename,"UTF-8"));
		 //这两行代码作用就是为了提供给下载功能，去掉后则直接是显示图片	 
		 //通过流写数据
		InputStream in = null;
		OutputStream out = null;
		try {
			in = new FileInputStream(path);
			int len = 0;
			byte[] buffer = new byte[1024];		
			out = response.getOutputStream();//修改	
			while ((len = in.read(buffer)) > 0) {
				out.write(buffer, 0, len);
			}
		}finally {
			if (in != null) {
				try {
					in.close();
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
			if (out != null) {
				try {
					out.close();
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		} 
			

3.验证码：  随机生成图片，用于验证码(servelt方法)
  WEB2/ ResponseDemo2
   
4.定时刷新，转发
   WEB2/ResponseDemo3
   
 5.控制浏览器缓存
    //缓存一小时  ，1000*3600  一小时
		response.setDateHeader("exprise", 1000);
	
		String date="aaaaaa";
		response.getWriter().write(date);
    
 6.response 请求重定向
   例如：response.sendRedirect("/WEB2/index.jsp");
   重定向特点：1.浏览器会向服务器发送两次，意味这有两个request/response
              2.重定向技术会让浏览器地址发生变化
              3.response 中getOutStream()和getWrite()不能同时用
 
 
 7.实现数据压缩

 
 
 
 request应用
 
 要得到浏览器信息，就找HttpServletRequest对象
 
 HttpServletRequest常用方法
 
 1.获得客户机【浏览器】信息
getRequestURL方法返回客户端发出请求时的完整URL。
getRequestURI方法返回请求行中的资源名部分。
getQueryString 方法返回请求行中的参数部分。
getPathInfo方法返回请求URL中的额外路径信息。额外路径信息是请求URL中的位于Servlet的路径之后和查询参数之前的内容，它以“/”开头。
getRemoteAddr方法返回发出请求的客户机的IP地址
getRemoteHost方法返回发出请求的客户机的完整主机名
getRemotePort方法返回客户机所使用的网络端口号
getLocalAddr方法返回WEB服务器的IP地址。
getLocalName方法返回WEB服务器的主机名

2.获得客户机请求头
getHeader方法
getHeaders方法
getHeaderNames方法

3.获得客户机请求参数(客户端提交的数据)
getParameter方法
getParameterValues（String name）方法
getParameterNames方法
getParameterMap方法
 
 
 常见的get方式提交数据有：使用超链接，sendRedirect()
 
 
 1. request转发
    
     使用response的sendRedirect()可以实现重定向，做到的功能是页面跳转，
     使用request的getRequestDispatcher.forward(request,response)实现转发，做到的功能也是页面跳转，他们有什么区别呢
     
 
 2.中文乱码
  为什么post方式设置了request编码就可以解决乱码问题，而get方式不能呢
  
 post方法是怎么进行参数传递的。当我们点击提交按钮的时候，数据封装进了Form Data中，**http请求中把实体主体带过去了【传输的数据称之为实体主体】
 既然request对象封装了http请求，所以request对象可以解析到发送过来的数据，于是只要把编码设置成UTF-8就可以解决乱码问题了
 request.setCharacterEncoding("UTF-8");
 
 而get方式不同，它的数据是从消息行带过去的，没有封装到request对象里面，所以使用request设置编码是无效的。
         //此时得到的数据已经是被ISO 8859-1编码后的字符串了，这个是乱码
        String name = request.getParameter("username");
        //乱码通过反向查ISO 8859-1得到原始的数据
        byte[] bytes = name.getBytes("ISO8859-1");
        //通过原始的数据，设置正确的码表，构建字符串
        String value = new String(bytes, "UTF-8");
get方式还可以改Tomcat服务器的配置来解决乱码，但是不推荐使用，这样不灵活。
    <Connector port="8080" protocol="HTTP/1.1" 
               connectionTimeout="20000" 
               redirectPort="8443" URIEncoding="utf-8"/>
	       
总结：
post方式直接改request对象的编码
get方式需要手工转换编码
get方式也可以修改Tomcat服务器的编码，不推荐，因为会太依赖服务器了！
提交数据能用post就用post
	    
 
 3.防盗链（设计网投、网尾）
 例子：
         //获取到网页是从哪里来的
        String referer = request.getHeader("Referer");
       //如果不是从我的首页来或者从地址栏直接访问的，
       if ( referer == null || !referer.contains("localhost:8080/zhongfucheng/index.jsp") ) {
            //回到首页去
            response.sendRedirect("/zhongfucheng/index.jsp");
            return;
        }
        //能执行下面的语句，说明是从我的首页点击进来的，那没问题，照常显示
        response.setContentType("text/html;charset=UTF-8");
        response.getWriter().write("路飞做了XXXXxxxxxxxxxxxxxxxx");
 
 
4.request的域
request的域仅仅代表一次http请求

一般的原则：可以使用request就尽可能使用request。因为ServletContext代表着整个web应用，使用ServletContext会消耗大量的资源，
而request对象会随着请求的结束而结束，资源会被回收。使用request域进行Servlet之间的通讯在开发中是非常频繁的
	
	
	
5.转发和重定向的区别

实际发生位置不同，地址栏不同

转发是发生在服务器的，
实现转发只是一次的http请求，一次转发中request和response对象都是同一个。这也解释了，为什么可以使用request作为域对象进行Servlet之间的通讯。
	
重定向是发生在浏览器的
重定向是由浏览器进行跳转的，进行重定向跳转的时候，浏览器的地址会发生变化的。曾经介绍过：实现重定向的原理是由response的状态码和Location头组合而实现的。
这是由浏览器进行的页面跳转实现重定向会发出两个http请求，**request域对象是无效的，因为它不是同一个request对象


用法不同
给服务器用的直接从资源名开始写，给浏览器用的要把应用名写上
request.getRequestDispatcher("/资源名 URI").forward(request,response)
转发时"/"代表的是本应用程序的根目录【zhongfucheng】
response.send("/web应用/资源名 URI");
重定向时"/"代表的是webapps目录	
	
	
能够去往的URL的范围不一样

转发是服务器跳转只能去往当前web应用的资源
重定向是服务器跳转，可以去往任何的资源	
	
	
传递数据的类型不同

转发的request对象可以传递各种类型的数据，包括对象
重定向只能传递字符串	


跳转的时间不同

转发时：执行到跳转语句时就会立刻跳转
重定向：整个页面执行完之后才执行跳转
 
 
 
典型的应用场景：

转发: 访问 Servlet 处理业务逻辑，然后 forward 到 jsp 显示处理结果，浏览器里 URL 不变
重定向: 提交表单，处理成功后 redirect 到另一个 jsp，防止表单重复提交，浏览器里 URL 变了 
 
 
 
 
 
 
 
 
 
 MVC设计模式
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
  
